<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>彻底弄懂 Javascript 模块导入导出</title>
      <link href="/2022/12/30/%E5%BD%BB%E5%BA%95%E5%BC%84%E6%87%82-Javascript-%E6%A8%A1%E5%9D%97%E5%AF%BC%E5%85%A5%E5%AF%BC%E5%87%BA/"/>
      <url>/2022/12/30/%E5%BD%BB%E5%BA%95%E5%BC%84%E6%87%82-Javascript-%E6%A8%A1%E5%9D%97%E5%AF%BC%E5%85%A5%E5%AF%BC%E5%87%BA/</url>
      
        <content type="html"><![CDATA[<p>笔者开始学习 Javascript 的时候，对模块不太懂，不知道怎么导入模块，导出模块，就胡乱一通试</p><p>比如 import xx from ‘test.js’ 不起作用，就加个括号 import {xx} from ‘test.js’</p><p>反正总是靠蒙，总有一种写法是对的，其实还是没有理解，还是不懂</p><p>尤其是在当初写 <a href="http://www.helloworld.net/">www.helloworld.net</a> 网站的时候，一遇到这种问题，就懵逼了，尤其是引入第三方库的时候</p><p>这种情况下更多，此篇文章也是为了怕以后忘记，自查用的，也希望能帮助更多的朋友，此篇文章只是针对 ES6 的模块相关知识</p><hr><p>首先要知道 export，import 是什么</p><p>我们知道，JS 模块导入导出，使用 import , export 这两个关键字</p><p>export 用于对外输出本模块<br>import 用于导入模块</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">也就是说使用 export 导出一个模块之后，其它文件就可以使用 import 导入相应的模块了</span><br></pre></td></tr></table></figure><p>下面我们具体看看， import 和 export 到底怎么用？怎么导出模块（比如变量，函数，类，对象等）</p><hr><p>1 导出单个变量</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//a.js 导出一个变量，语法如下</span><br><span class="line">export var site = &quot;www.helloworld.net&quot;</span><br><span class="line"></span><br><span class="line">//b.js 中使用import 导入上面的变量</span><br><span class="line">import &#123; site &#125; from &quot;/.a.js&quot; //路径根据你的实际情况填写</span><br><span class="line">console.log(site)//输出： www.helloworld.net</span><br></pre></td></tr></table></figure><hr><p>2 导出多个变量<br>上面的例子是导出单个变量，那么如何导出多个变量呢</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">//a.js 中定义两个变量，并导出</span><br><span class="line">var siteUrl=&quot;www.helloworld.net&quot;</span><br><span class="line">var siteName=&quot;helloworld开发者社区&quot;</span><br><span class="line"></span><br><span class="line">//将上面的变量导出</span><br><span class="line">export &#123; siteUrl ,siteName &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// b.js 中使用这两个变量</span><br><span class="line">import &#123; siteUrl , siteName &#125; from &quot;/.a.js&quot; //路径根据你的实际情况填写</span><br><span class="line"></span><br><span class="line">console.log(siteUrl)//输出： www.helloworld.net</span><br><span class="line">console.log(siteName)//输出： helloworld开发者社区</span><br></pre></td></tr></table></figure><p>3 导出函数<br>导出函数和导出变量一样，需要添加 { }</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">//a.js 中定义并导出一个函数</span><br><span class="line">function sum(a, b) &#123;</span><br><span class="line">   return a + b</span><br><span class="line">&#125;</span><br><span class="line">//将函数sum导出</span><br><span class="line">export &#123; sum &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//b.js 中导入函数并使用</span><br><span class="line">import &#123; sum &#125; from &quot;/.a.js&quot; //路径根据你的实际情况填写</span><br><span class="line">console.log( sum(4,6) ) //输出： 10</span><br></pre></td></tr></table></figure><p>4 导出对象<br>js 中一切皆对象，所以对象一定是可以导出的，并且有两种写法</p><p>4.1 第一种写法<br>使用 export default 关键字导出，如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">//a.js 中，定义对象并导出, 注意，使用export default 这两个关键字导出一个对象</span><br><span class="line">export default &#123;</span><br><span class="line">    siteUrl:&#x27;www.helloworld.net&#x27;,</span><br><span class="line">    siteName:&#x27;helloworld开发者社区&#x27;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//b.js 中导入并使用</span><br><span class="line">import obj from &#x27;./a.js&#x27;   //路径根据你的实际情况填写</span><br><span class="line">console.log(obj.siteUrl)//输出：www.helloworld.net</span><br><span class="line">console.log(obj.siteName)//输出：helloworld开发者社区</span><br></pre></td></tr></table></figure><p>4.2 第二种写法<br>同样是使用 export default 关键字，如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">//a.js 中定义对象，并在最后导出</span><br><span class="line">var obj = &#123;</span><br><span class="line">   siteUrl:&#x27;www.helloworld.net&#x27;,</span><br><span class="line">    siteName:&#x27;helloworld开发者社区&#x27;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default obj//导出对象obj</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//b.js 中导入并使用</span><br><span class="line">import obj from &#x27;./a.js&#x27;   //路径根据你的实际情况填写</span><br><span class="line">console.log(obj.siteUrl)//输出：www.helloworld.net</span><br><span class="line">console.log(obj.siteName)//输出：helloworld开发者社区</span><br></pre></td></tr></table></figure><p>5 导出类<br>导出类与上面的导出对象类似，同样是用 export default 关键字，同样有两种写法</p><p>5.1 第一种写法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">//a.js 中定义一个类并直接导出</span><br><span class="line">export default class Person &#123;</span><br><span class="line">    //类的属性</span><br><span class="line">    site = &quot;www.helloworld.net&quot;</span><br><span class="line"></span><br><span class="line">    //类的方法</span><br><span class="line">    show()&#123;</span><br><span class="line">        console.log(this.site)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//b.js 中导入并使用</span><br><span class="line">//导入类</span><br><span class="line">import Person from &#x27;./a.js&#x27;</span><br><span class="line"></span><br><span class="line">//创建类的一个对象person</span><br><span class="line">let person = new Person()</span><br><span class="line"></span><br><span class="line">//调用类的方法</span><br><span class="line">person.show()  //输出：www.helloworld.net</span><br></pre></td></tr></table></figure><p>5.2 第二种写法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">//a.js 中定义一个类，最后导出</span><br><span class="line">class Person &#123;</span><br><span class="line">    //类的属性</span><br><span class="line">    site = &quot;www.helloworld.net&quot;</span><br><span class="line"></span><br><span class="line">    //类的方法</span><br><span class="line">    show()&#123;</span><br><span class="line">        console.log(this.site)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//导出这个类</span><br><span class="line">export default Person</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//b.js 中导入并使用</span><br><span class="line">//导入类</span><br><span class="line">import Person from &#x27;./a.js&#x27;</span><br><span class="line"></span><br><span class="line">//创建类的一个对象person</span><br><span class="line">let person = new Person()</span><br><span class="line"></span><br><span class="line">//调用类的方法</span><br><span class="line">person.show()  //输出：www.helloworld.net</span><br></pre></td></tr></table></figure><hr><p>小结<br>下面我们简单总结一下<br>export 与 export default 的区别<br>·export 与 export default 均可用于导出常量、函数、文件、模块等<br>·可以在其它文件或模块中通过 import+(常量 | 函数 | 文件 | 模块) 名的方式，将其导入，以便能够对其进行使用<br>·export default 后面不能跟 const 或 let 的关键词<br>·export、import 可以有多个，export default 仅有一个。<br>·通过 export 方式导出，在导入时要加 { }，export default 则不需要<br>·export 具名导出 xxx ，export default 匿名。区别在于导入的时候，export 需要一样的名称才能匹配，后者无论取什么名都可以。<br>·模块化管理中一个文件就是一个模块，export 可以导出多个方法和变量，export default 只能导出当前模块，一个 js ·文件中只支持出现一个</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>博客语言学习</title>
      <link href="/2022/12/30/%E5%8D%9A%E5%AE%A2%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/"/>
      <url>/2022/12/30/%E5%8D%9A%E5%AE%A2%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<p>A 标签跳转<br><a href="https://www.baidu.com/">去百度</a></p><p>显示图片<br><img src="https://tangjiusheng.com/d/file/p/2022/11-01/ea0020e59fd64ddc68dd1ed164cd7cba.jpg?image_process=resize,p_80" alt="复制的图片"></p><p>一段代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//js代码</span><br><span class="line">render (createElement) &#123;</span><br><span class="line">     return (</span><br><span class="line">         &lt;button content=&#123;this.generatedText&#125;&gt;&lt;/button&gt;     )</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>目录</p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><p>分割线</p><hr><p>12312</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>html中link标签怎么用（前端link和@import的区别在哪）</title>
      <link href="/2022/12/30/html%E4%B8%ADlink%E6%A0%87%E7%AD%BE%E6%80%8E%E4%B9%88%E7%94%A8%EF%BC%88%E5%89%8D%E7%AB%AFlink%E5%92%8C-import%E7%9A%84%E5%8C%BA%E5%88%AB%E5%9C%A8%E5%93%AA%EF%BC%89/"/>
      <url>/2022/12/30/html%E4%B8%ADlink%E6%A0%87%E7%AD%BE%E6%80%8E%E4%B9%88%E7%94%A8%EF%BC%88%E5%89%8D%E7%AB%AFlink%E5%92%8C-import%E7%9A%84%E5%8C%BA%E5%88%AB%E5%9C%A8%E5%93%AA%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>link 标签是干嘛的？</p><p>link 标签是定义文档与外部资源的关系。link 标签是最常见的用途是链接样式表。通过预处理提升渲染速度 在我们对中大型项目进行性能优化时，往往会对资源做减法（gzip 压缩，缓存等）或除法（按需打包，按需加载），可是如果能想到 link 标签的 rel 属性值来进行预加载，也能加快页面的渲染速度。</p><p>html 中 link 标签怎么用看如下代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">  &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">  &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">  &lt;!-- 通过link标签引入a.css文件样式 --&gt;</span><br><span class="line">  &lt;link rel=&quot;stylesheet&quot; href=&quot;./a.css&quot;&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div&gt;测试111&lt;/div&gt;</span><br><span class="line">  &lt;p&gt;测试222&lt;/p&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>@import 的使用方法 a.css 文件代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">/_ a.css 文件内容 _/</span><br><span class="line">/_ 通过@import 引入 b.css 样式 _/</span><br><span class="line">@import &#x27;./b.css&#x27;;</span><br><span class="line">div&#123;</span><br><span class="line">background-color: blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>@import 的使用方法 b.css 文件代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/_ b.css 文件内容 _/</span><br><span class="line">p&#123;</span><br><span class="line">color:red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@import &#x27;./b.css&#x27;; //在 a.css 文件中 把 b.css 样式引入到 a.css 文件</span><br></pre></td></tr></table></figure><p>截图：<br>其中方括号是图片描述，圆括号是图片路径。</p><p>一般来说有三种图片路径，分别是相对路径，绝对路径和网络路径。<br><img src="https://tangjiusheng.com/d/file/p/2022/11-01/ea0020e59fd64ddc68dd1ed164cd7cba.jpg?image_process=resize,p_80" alt="复制的图片"></p><p>A标签跳转<br>More info: <a href="https://www.baidu.com/s?wd=hexo%20%E5%9B%BE%E7%89%87&rsv_spt=1&rsv_iqid=0xf02f7de700005da1&issp=1&f=8&rsv_bp=1&rsv_idx=2&ie=utf-8&rqlang=cn&tn=baiduhome_pg&rsv_enter=0&rsv_dl=tb&oq=hexo%2520%25E5%259B%25BE%25E7%2589%2587&rsv_btype=t&rsv_t=d87cu+n1KQxmURj/6IlgEmZy8HTwTHz7jN3HB8Q4DX+lObrPa1AmEm0y9tHnKZZ2oNkH&rsv_pq=bd1d8cae0000e6fa">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><hr><p>前端 link 和@import 的区别在哪</p><p>1.先有 link，后面再有@import ,link 兼容性比@import 好</p><p>2.加载顺序：浏览器先加载标签 Link，再加载@import</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>wget使用</title>
      <link href="/2022/12/30/wget%E4%BD%BF%E7%94%A8/"/>
      <url>/2022/12/30/wget%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>目录</p><p>一、wget 的下载与安装（错误的安装）</p><p>1.下载</p><p>2.安装</p><p>3.配置环境</p><p>4.验证是否安装成功</p><p>5.可能出现的问题</p><p>二、wget 的卸载（未使用方法一下载过的请忽略）</p><p>三、正确的安装！！！（直接安装请看这里）</p><p>四、wget 的使用</p><p>建议看完下面内容再进行安装！！！！</p><pre><code>    第一章的安装方法是本人尝试后行不通的方法，特此记录以作警示，第三章是本人尝试的可以正确安装的方法，直接安装请移步第三章！！！    对于那些上来就按照第一章操作、不看该块内容的人，我只能说句：活该！！别进来就直接扒饭吃。</code></pre><p>PS：目录也写的很清楚，眼瞎的绕路</p><p>一、wget 的下载与安装（错误的安装） 1.下载<br>wget 下载链接：Wget for Windows (sourceforge.net)</p><p>进入页面后，点击这个链接下载 wget</p><p>进入界面后，点击 download 下载文件</p><p>下载得到.exe 文件</p><p>右键以管理员身份运行，开始安装</p><p>2.安装<br>下面是一路 next</p><p>这个安装目录可以改一下，装到自己想装的位置，并记住这个位置 ，后面需要添加环境</p><p>3.配置环境<br>（1）新建系统变量</p><p>此电脑 → 属性 → 高级系统设置 → 环境变量 → 系统变量 → 新建</p><p>变量名：GUN_HOME</p><p>变量值为你的 wget 的安装路径</p><p>（2）添加环境变量</p><p>系统变量 → 编辑 → 新建 → 输入环境 → 确定</p><p>环境：%GNU_HOME%\bin</p><p>4.验证是否安装成功<br>win+R→cmd→ 输入如下命令</p><p>出现一串命令表示安装成功</p><p>wget –help</p><p>5.可能出现的问题<br>也可能出现以下问题</p><p>尝试了一些方法：</p><p>cd 到这个位置运行命令也不行</p><p>cd C:\Windows\System32</p><p>二、wget 的卸载（未使用方法一下载过的请忽略）<br>相信踩过坑的你肯定安装了无法使用的 wget，既然无法使用，我们就要卸载！！！</p><p>右键运行.exe</p><p>好了卸载了</p><p>记得把刚才配置的环境都删掉！！！</p><p>============================分割线===============================</p><p>三、正确的安装！！！（直接安装请看这里）<br>下面开始解决问题</p><p>去该网址下载二进制文件：GNU Wget 1.21.3 for Windows</p><p>注意：要根据你的电脑选择 32 位还是 64 位，这很重要</p><p>我下载的是这个，仅供参考</p><p>然后你会得到一个.zip 格式的文件夹</p><p>解压，解压到哪里都行</p><p>里面有这些东西</p><p>然后将 wget.exe 复制到 C:\Windows\System32 下，就像这样</p><p>然后 win+R→cmd</p><p>输入 wget，出现如下的界面说明安装成功</p><p>四、wget 的使用</p><h5 id="wget-c-r-npH-k-https-www-zhaoxin-cn"><a href="#wget-c-r-npH-k-https-www-zhaoxin-cn" class="headerlink" title="wget -c -r -npH -k https://www.zhaoxin.cn/"></a>wget -c -r -npH -k <a href="https://www.zhaoxin.cn/">https://www.zhaoxin.cn/</a></h5><p>建议参考这位博主：wget 的使用</p><p>我盘符比较小，所以我需要把文件下载到盘符大的目录</p><p>wget -P 目录地址 下载地址</p><p>注意：目录地址中不能有中文、空格，不然无法解析</p><p>不明白的参考这个博客：指定下载目录</p><p>wget -i filename.txt<br>此命令常用于批量下载的情形，把所有需要下载文件的地址放到 filename.txt 中，然后 wget 就会自动为你下载所有文件了。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>爬虫相关</title>
      <link href="/2022/12/30/%E7%88%AC%E8%99%AB%E7%9B%B8%E5%85%B3/"/>
      <url>/2022/12/30/%E7%88%AC%E8%99%AB%E7%9B%B8%E5%85%B3/</url>
      
        <content type="html"><![CDATA[<p>robots.txt写法大全和robots.txt语法的作用<br>1如果允许所有搜索引擎访问网站的所有部分的话 我们可以建立一个空白的文本文档，命名为robot<br>s.txt放在网站的根目录下即可。<br>robots.txt写法如下：<br>User-agent: *<br>Disallow:<br>或者<br>User-agent: *<br>Allow: /<br>2如果我们禁止所有搜索引擎访问网站的所有部分的话<br>robots.txt写法如下：<br>User-agent: *<br>Disallow: /<br>3如果我们需要某一个搜索引擎的抓取的话，比如百度，禁止百度索引我们的网站的话<br>robots.txt写法如下：<br>User-agent: Baiduspider<br>Disallow: /<br>4如果我们禁止Google索引我们的网站的话，其实跟示例3一样，就是User-agent:头文件的蜘蛛名<br>字改成谷歌的Googlebot<br>即可<br>robots.txt写法如下：<br>User-agent: Googlebot<br>Disallow: /<br>5如果我们禁止除Google外的一切搜索引擎索引我们的网站话<br>robots.txt写法如下：<br>User-agent: Googlebot<br>Disallow:<br>User-agent: *<br>Disallow: /<br>6如果我们禁止除百度外的一切搜索引擎索引我们的网站的话<br>robots.txt写法如下：<br>User-agent: Baiduspider<br>Disallow:<br>User-agent: *<br>Disallow: /<br>7如果我们需要禁止蜘蛛访问某个目录，比如禁止admin、css、images等目录被索引的话<br>robots.txt写法如下：<br>User-agent: *<br>Disallow: /css/<br>Disallow: /admin/<br>Disallow: /images/<br>8如果我们允许蜘蛛访问我们网站的某个目录中的某些特定网址的话<br>robots.txt写法如下：<br>User-agent: *<br>Allow: /css/my<br>Allow: /admin/html<br>Allow: /images/index<br>Disallow: /css/<br>Disallow: /admin/<br>Disallow: /images/<br>9我们看某些网站的robots.txt里的Disallow或者Allow里会看很多的符号，比如问号星号什么的，<br>如果使用“<em>”，主要是限制访问某个后缀的域名，禁止访问/html/目录下的所有以”.htm”为后缀的<br>URL(包含子目录)。<br>robots.txt写法如下：<br>User-agent: *<br>Disallow: /html/</em>.htm<br>10如果我们使用“$”的话是仅允许访问某目录下某个后缀的文件<br>robots.txt写法如下：<br>User-agent: *<br>Allow: .asp$<br>Disallow: /<br>11如果我们禁止索引网站中所有的动态页面（这里限制的是有“?”的域名，例如index.asp?id=1<br>robots.txt写法如下：<br>User-agent: *<br>Disallow: /<em>?</em><br>有些时候，我们为了节省服务器资源，需要禁止各类搜索引擎来索引我们网站上的图片，这里的办<br>法除了使用“Disallow: /images/”这样的直接屏蔽文件夹的方式之外，还可以采取直接屏蔽图片<br>后缀名的方式。<br>示例12<br>如果我们禁止Google搜索引擎抓取我们网站上的所有图片(如果你的网站使用其他后缀的图片名称<br>，在这里也可以直接添加)<br>robots.txt写法如下：<br>User-agent: Googlebot<br>Disallow: .jpg$<br>Disallow: .jpeg$<br>Disallow: .gif$<br>Disallow: .png$<br>Disallow: .bmp$<br>13如果我们禁止百度搜索引擎抓取我们网站上的所有图片的话<br>robots.txt写法如下：<br>User-agent: Baidus<br>pider<br>Disallow: .jpg$<br>Disallow: .jpeg$<br>Disallow: .gif$<br>Disallow: .png$<br>Disallow: .bmp$<br>14除了百度之外和Google之外，禁止其他搜索引擎抓取你网站的图片<br>(注意，在这里为了让各位看的更明白，因此使用一个比较笨的办法——对于单个搜索引擎单独定义<br>。)<br>robots.txt写法如下：<br>User-agent: Baiduspider<br>Allow: .jpeg$<br>Allow: .gif$<br>Allow: .png$<br>Allow: .bmp$<br>User-agent: Googlebot<br>Allow: .jpeg$<br>Allow: .gif$<br>Allow: .png$<br>Allow: .bmp$<br>User-agent: *<br>Disallow: .jpg$<br>Disallow: .jpeg$<br>Disallow: .gif$<br>Disallow: .png$<br>Disallow: .bmp$<br>15仅仅允许百度抓取网站上的“JPG”格式文件<br>（其他搜索引擎的办法也和这个一样，只是修改一下搜索引擎的蜘蛛名称即可）<br>robots.txt写法如下：<br>User-agent: Baiduspider<br>Allow: .jpg$<br>Disallow: .jpeg$<br>Disallow: .gif$<br>Disallow: .png$<br>Disallow: .bmp$<br>16仅仅禁止百度抓取网站上的“JPG”格式文件<br>robots.txt写法如下：<br>User-agent: Baiduspider<br>Disallow: .jpg$<br>17如果 ? 表示一个会话 ID，您可排除所有包含该 ID 的网址，确保 Googlebot 不会抓取重复的网<br>页。但是，以 ? 结尾的网址可能是您要包含的网页版本。在此情况下，沃恩可将与 Allow 指令配合<br>使用。<br>robots.txt写法如下：<br>User-agent:*<br>Allow:/<em>?$<br>Disallow:/</em>?<br>Disallow:/ <em>?<br>一行将拦截包含 ? 的网址（具体而言，它将拦截所有以您的域名开头、后接任意字符串，然后是问<br>号 (?)，而后又是任意字符串的网址）。Allow: /</em>?$ 一行将允许包含任何以 ? 结尾的网址（具体而<br>言，它将允许包含所有以您的域名开头、后接任意字符串，然后是问号 (?)，问号之后没有任何字符<br>的网址）。<br>18如果我们想禁止搜索引擎对一些目录或者某些URL访问的话，可以截取部分的名字<br>robots.txt写法如下：<br>User-agent:*<br>Disallow: /plus/feedback.php?</p><h2 id="以下是百度遵循的robots协议"><a href="#以下是百度遵循的robots协议" class="headerlink" title="以下是百度遵循的robots协议"></a>以下是百度遵循的robots协议</h2><p>User-agent: Baiduspider<br>Disallow: /baidu<br>Disallow: /s?<br>Disallow: /ulink?<br>Disallow: /link?<br>Disallow: /home/news/data/<br>Disallow: /bh</p><p>User-agent: Googlebot<br>Disallow: /baidu<br>Disallow: /s?<br>Disallow: /shifen/<br>Disallow: /homepage/<br>Disallow: /cpro<br>Disallow: /ulink?<br>Disallow: /link?<br>Disallow: /home/news/data/<br>Disallow: /bh</p><p>User-agent: MSNBot<br>Disallow: /baidu<br>Disallow: /s?<br>Disallow: /shifen/<br>Disallow: /homepage/<br>Disallow: /cpro<br>Disallow: /ulink?<br>Disallow: /link?<br>Disallow: /home/news/data/<br>Disallow: /bh</p><p>User-agent: Baiduspider-image<br>Disallow: /baidu<br>Disallow: /s?<br>Disallow: /shifen/<br>Disallow: /homepage/<br>Disallow: /cpro<br>Disallow: /ulink?<br>Disallow: /link?<br>Disallow: /home/news/data/<br>Disallow: /bh</p><p>User-agent: YoudaoBot<br>Disallow: /baidu<br>Disallow: /s?<br>Disallow: /shifen/<br>Disallow: /homepage/<br>Disallow: /cpro<br>Disallow: /ulink?<br>Disallow: /link?<br>Disallow: /home/news/data/<br>Disallow: /bh</p><p>User-agent: Sogou web spider<br>Disallow: /baidu<br>Disallow: /s?<br>Disallow: /shifen/<br>Disallow: /homepage/<br>Disallow: /cpro<br>Disallow: /ulink?<br>Disallow: /link?<br>Disallow: /home/news/data/<br>Disallow: /bh</p><p>User-agent: Sogou inst spider<br>Disallow: /baidu<br>Disallow: /s?<br>Disallow: /shifen/<br>Disallow: /homepage/<br>Disallow: /cpro<br>Disallow: /ulink?<br>Disallow: /link?<br>Disallow: /home/news/data/<br>Disallow: /bh</p><p>User-agent: Sogou spider2<br>Disallow: /baidu<br>Disallow: /s?<br>Disallow: /shifen/<br>Disallow: /homepage/<br>Disallow: /cpro<br>Disallow: /ulink?<br>Disallow: /link?<br>Disallow: /home/news/data/<br>Disallow: /bh</p><p>User-agent: Sogou blog<br>Disallow: /baidu<br>Disallow: /s?<br>Disallow: /shifen/<br>Disallow: /homepage/<br>Disallow: /cpro<br>Disallow: /ulink?<br>Disallow: /link?<br>Disallow: /home/news/data/<br>Disallow: /bh</p><p>User-agent: Sogou News Spider<br>Disallow: /baidu<br>Disallow: /s?<br>Disallow: /shifen/<br>Disallow: /homepage/<br>Disallow: /cpro<br>Disallow: /ulink?<br>Disallow: /link?<br>Disallow: /home/news/data/<br>Disallow: /bh</p><p>User-agent: Sogou Orion spider<br>Disallow: /baidu<br>Disallow: /s?<br>Disallow: /shifen/<br>Disallow: /homepage/<br>Disallow: /cpro<br>Disallow: /ulink?<br>Disallow: /link?<br>Disallow: /home/news/data/<br>Disallow: /bh</p><p>User-agent: ChinasoSpider<br>Disallow: /baidu<br>Disallow: /s?<br>Disallow: /shifen/<br>Disallow: /homepage/<br>Disallow: /cpro<br>Disallow: /ulink?<br>Disallow: /link?<br>Disallow: /home/news/data/<br>Disallow: /bh</p><p>User-agent: Sosospider<br>Disallow: /baidu<br>Disallow: /s?<br>Disallow: /shifen/<br>Disallow: /homepage/<br>Disallow: /cpro<br>Disallow: /ulink?<br>Disallow: /link?<br>Disallow: /home/news/data/<br>Disallow: /bh</p><p>User-agent: yisouspider<br>Disallow: /baidu<br>Disallow: /s?<br>Disallow: /shifen/<br>Disallow: /homepage/<br>Disallow: /cpro<br>Disallow: /ulink?<br>Disallow: /link?<br>Disallow: /home/news/data/<br>Disallow: /bh</p><p>User-agent: EasouSpider<br>Disallow: /baidu<br>Disallow: /s?<br>Disallow: /shifen/<br>Disallow: /homepage/<br>Disallow: /cpro<br>Disallow: /ulink?<br>Disallow: /link?<br>Disallow: /home/news/data/<br>Disallow: /bh</p><p>User-agent: *<br>Disallow: /</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>git-page</title>
      <link href="/2022/12/23/git-page/"/>
      <url>/2022/12/23/git-page/</url>
      
        <content type="html"><![CDATA[<p>切换主分支 git  pull<br>切换 自己分支 git merge master</p><p>在项目所在位置打开git-bash， 在git bash交互环境输入命令：<br>git config credential.helper store<br>不加参数： –global 只对这个仓库生效，并非全局设置 。<br>后续正常 push，第一次要输入账号密码，以后就不用了。</p><p>使用git pull或者git push每次都需要输入用户名和密码很繁琐，耽误时间，现在教大家一条命令实现保存用户名和密码不用再输入<br>git config –global credential.helper store</p><p>git pull /git push (第一次输入，后续就不用再次数据)</p><p>push你的代码 (git push), 这时会让你输入用户名和密码, 这一步输入的用户名密码会被记住, 下次再push代码时就不用输入用户名密码 ! 这一步会在用户目录下生成文件.git-credential记录用户名密码的信息。</p><p>如何让他再次失效呢</p><p>1<br>git提交时不用输入用户名密码的方法<br>在git push时每次都要输入用户名和密码是一件很痛苦的事，其实解决方法很简单，在文件夹（包含隐藏文件夹.git文件夹的）内右键 git bash here</p><p>在git bash交互环境输入命令</p><p>git config credential.helper store<br>这里没有–global意思是指只对这个仓库生效，建议以后都不要加–global</p><p>让代码配置以仓库为单位存储就好，设置成全局不灵活</p><p>打开.git文件夹的.config文件，回发现多了两行</p><p>[credential]</p><p>helper=store<br>git push 到远程仓库，输入用户名和密码，注意要输入正确的</p><p>再次运行git push 就不用输入用户名和密码了</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>interview-page</title>
      <link href="/2022/12/23/interview-page/"/>
      <url>/2022/12/23/interview-page/</url>
      
        <content type="html"><![CDATA[<ol><li>自我介绍</li><li>上家公司与当前位置</li><li>为什么从上家公司离职</li><li>你的优点与缺点是什么</li><li>人员组成</li><li>项目如何分工</li><li>你有什么想问我的吗</li></ol><p>BFC/盒子模型/flex布局/H5新特性/rem适配</p><p>作用域与作用域链<br>闭包<br>函数中的this</p><p>原型与原型链<br>垃圾回收机制<br>JS的事件循环机制<br>promise / async与await<br>箭头函数的特点<br>跨域问题<br>axios的二次封装 =&gt; axios的整体执行流程<br>从输入url到渲染出页面的整个过程<br>函数节流与防抖<br>深拷贝</p><p>区别v-if与v-show<br>为什么v-for与v-if不适合一起使用<br>computed与watcher<br>Vue组件的生命周期<br>组件间通信<br>history与hash路由的区别<br>Vue响应式数据原理<br>$nextTick的原理<br>虚拟DOM与DOM Diff<br>说说vue组件的模板解析<br>说说你对TS的理解<br>说说Vue3的特点</p><p>说说对react的理解<br>说说react的hook<br>说说react组件间通信</p><p>说一下你的项目<br>封装过什么组件<br>遇到过什么问题<br>项目优化<br>权限控制如何实现</p><p>22<br>2000 出生 22岁</p><p>两年经验<br>统–<br>2019.09-2022.06<br>非<br>2018.09-2021.06<br>2019.09 2020.06 2021.06 2022.06<br>21  22 </p><p>爱鱼优品<br>这是一个使用uniapp vant 搭建的小程序app<br>主要有首页、分类页、购物车页、个人中心页<br>‘</p><p>screenHeight是手机屏幕的总高度，包含状态栏、导航栏、页面内容。状态栏是手机最上面显示信号、电量的那一小条。导航栏是显示小程序标题和胶囊按钮的那一条。</p><p>windowHeight是页面内容的高度，默认不包括状态栏和导航栏。但是如果你设置了自定义导航栏（”navigationStyle”:”custom”），它的值就和screenHeight一样了。</p><p>d</p><ol><li></li></ol><p>2021.07 2022.09   武汉CET中电技术有限公司       web前端开发<br>岗位职责：</p><ol><li>   与产品和后端进行密切交流和合作，共同研讨产品和技术的实现方案；</li><li>   与UI设计师、交互设计师合作完成具有良好的兼容性和适用性的产品；</li><li>   遵守代码规范，编写结构清晰、可维护性强、高质量、高效率的代码；</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/12/21/hello-world/"/>
      <url>/2022/12/21/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>编程干货️为什么说PHP是世界上最好的语言</title>
      <link href="/2022/08/10/02-page/"/>
      <url>/2022/08/10/02-page/</url>
      
        <content type="html"><![CDATA[<p>PHP领域较新，目前发展非常快，很多软硬件技术出现的时间都不太长（如ARM处理器、PHP操作系统、LINUX操作系统），大多数人没有条件接触或进入PHP行业，更谈不上能有机会接受专业人士的指导。因此，踏进这个行业的难度比较大，PHP人才稀缺，身价自然也水涨船高。</p><p>权威部门统计，我国PHP人才缺口每年50万人左右。根据前程无忧网发布的调查报告，PHP软件开发是未来几年热门和受欢迎的职业之一，具有10年工作经验的高级PHP工程师年薪在30万元左右。即使是初级的PHP软件开发人员，平均月薪也达到了4000—7000元，中高级的PHP工程师月薪平均超过10000元。 做软件实际上有高下之分，开发语言从机器语言、汇编到C、C++，再到红透半边天的Java、C＃等，该学哪种呢？为什么有些开发者工资低，而有些开发者千金难求？为什么3年的Java高级程序员薪水仅仅8k-10k，而一个Linux底层C语言程序员两年经验就敢要10k的薪水？</p><p>还是门槛，比如月薪15k的LinuxPHP开发职位，门槛就有 Linux系统、Shell编程、Linux开发环境、C语言、ARM硬件平台、数据结构、Linux内核、驱动程序等，粗略数数就有8道关口，他需要非常熟悉整个的计算机体系，能做出实际的产品，而Java的开发者却仅仅是会使用名叫Java的语言工具，始终高高飘在众多层次之上，开发项目非常快，甚至可以不知道OSI模型，很可能自始至终都是软件蓝领。</p><p>PHP开发本身也有高下之分，至少包含PHP应用程序工程师和底层的驱动内核工程师两种。前者同样是使用现成工具进行简单劳动，比如使用J2ME开发小游戏或者进行一些界面开发，而后者是根据芯片具体情况把操作系统（如Linux）移植到上面，同时编写必要的驱动程序，改写相应的内核代码。很显然后者是一个公司真正的技术核心。而技术核心的工资很可能是其他开发者的数倍。</p><p>PHP开发突出强制和项目，学习不仅仅是学习几项技术，而是构建你的知识体系。比如学习PHP开发，就要从基础Linux，C语言，数据结构开始，到ARM，汇编，Linux内核、驱动等，更重要的是更多的项目练习，设计至少5个项目，多达10000行强制核心代码的编写可以让你真正获得知识。为进入外企或者出国做准备。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hexo+Github博客搭建记录</title>
      <link href="/2019/08/10/my-first-page/"/>
      <url>/2019/08/10/my-first-page/</url>
      
        <content type="html"><![CDATA[<p>1.git安装<br>前往git官网下载安装git，官网地址：Git - Downloads (git-scm.com)、<br>相关教程：Git下载安装及设置详细教程_sanxd的博客-CSDN博客_git 安装<br>环境变量配置：在PATH下添加Git和Git/bin的路径。</p><p>2.node.js安装<br>前往官网下载node.js，官网地址Download | Node.js (nodejs.org)<br>环境变量配置：在PATH下添加npm的路径。</p><p>3.hexo安装<br>在命令行中输入npm install -g hexo-cli命令进入hexo的安装。<br>环境变量配置：在PATH下添加hexo-cli和.bin的路径。<br>完成所有配置后，在cmd中输入如图所示内容查看路径是否配置正确及版本。</p><p>4.hexo相关命令操作：<br>hexo init <folder>创建一个新的网页项目<br>hexo new page <name>创建一个新的网页文件夹<br>hexo new <name>创建一个新的md文章<br>hexo clean清空本地生成<br>hexo g本地生成<br>hexo s端口生成<br>hexo d自动部署</p><p>5.本地生成网页基本操作<br>例如<br>hexo init C:\Users\Lenovo\Desktop\text<br>在桌面test文件夹生成网页项目。</p><p>cd C:\Users\Lenovo\Desktop\text<br>进入网页项目文件夹<br>hexo new first_blog<br>hexo g &amp;&amp; hexo s<br>部署到端口，然后就可以进入<a href="http://localhost:4000/">http://localhost:4000</a> 查看你的新网页啦。</p><p>6.部署到USTC服务器<br>FileZilla的安装<br>登陆 home.ustc.edu.cn （连接校园网下按下面操作提示即可）<br>服务器上传<br>在服务器下创建public_html文件夹，然后将本地网页中的public文件夹下所有内容传上即可。</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
